/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ebay.epic.common.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BotFlag extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4202215627867657829L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BotFlag\",\"namespace\":\"com.ebay.epic.common.model\",\"fields\":[{\"name\":\"surface\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"ubi\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"utp\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BotFlag> ENCODER =
      new BinaryMessageEncoder<BotFlag>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BotFlag> DECODER =
      new BinaryMessageDecoder<BotFlag>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BotFlag> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BotFlag> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BotFlag>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BotFlag to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BotFlag from a ByteBuffer. */
  public static BotFlag fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.Integer> surface;
  @Deprecated public java.util.List<java.lang.Integer> ubi;
  @Deprecated public java.util.List<java.lang.Integer> utp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BotFlag() {}

  /**
   * All-args constructor.
   * @param surface The new value for surface
   * @param ubi The new value for ubi
   * @param utp The new value for utp
   */
  public BotFlag(java.util.List<java.lang.Integer> surface, java.util.List<java.lang.Integer> ubi, java.util.List<java.lang.Integer> utp) {
    this.surface = surface;
    this.ubi = ubi;
    this.utp = utp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return surface;
    case 1: return ubi;
    case 2: return utp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: surface = (java.util.List<java.lang.Integer>)value$; break;
    case 1: ubi = (java.util.List<java.lang.Integer>)value$; break;
    case 2: utp = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'surface' field.
   * @return The value of the 'surface' field.
   */
  public java.util.List<java.lang.Integer> getSurface() {
    return surface;
  }

  /**
   * Sets the value of the 'surface' field.
   * @param value the value to set.
   */
  public void setSurface(java.util.List<java.lang.Integer> value) {
    this.surface = value;
  }

  /**
   * Gets the value of the 'ubi' field.
   * @return The value of the 'ubi' field.
   */
  public java.util.List<java.lang.Integer> getUbi() {
    return ubi;
  }

  /**
   * Sets the value of the 'ubi' field.
   * @param value the value to set.
   */
  public void setUbi(java.util.List<java.lang.Integer> value) {
    this.ubi = value;
  }

  /**
   * Gets the value of the 'utp' field.
   * @return The value of the 'utp' field.
   */
  public java.util.List<java.lang.Integer> getUtp() {
    return utp;
  }

  /**
   * Sets the value of the 'utp' field.
   * @param value the value to set.
   */
  public void setUtp(java.util.List<java.lang.Integer> value) {
    this.utp = value;
  }

  /**
   * Creates a new BotFlag RecordBuilder.
   * @return A new BotFlag RecordBuilder
   */
  public static com.ebay.epic.common.model.BotFlag.Builder newBuilder() {
    return new com.ebay.epic.common.model.BotFlag.Builder();
  }

  /**
   * Creates a new BotFlag RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BotFlag RecordBuilder
   */
  public static com.ebay.epic.common.model.BotFlag.Builder newBuilder(com.ebay.epic.common.model.BotFlag.Builder other) {
    return new com.ebay.epic.common.model.BotFlag.Builder(other);
  }

  /**
   * Creates a new BotFlag RecordBuilder by copying an existing BotFlag instance.
   * @param other The existing instance to copy.
   * @return A new BotFlag RecordBuilder
   */
  public static com.ebay.epic.common.model.BotFlag.Builder newBuilder(com.ebay.epic.common.model.BotFlag other) {
    return new com.ebay.epic.common.model.BotFlag.Builder(other);
  }

  /**
   * RecordBuilder for BotFlag instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BotFlag>
    implements org.apache.avro.data.RecordBuilder<BotFlag> {

    private java.util.List<java.lang.Integer> surface;
    private java.util.List<java.lang.Integer> ubi;
    private java.util.List<java.lang.Integer> utp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ebay.epic.common.model.BotFlag.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.surface)) {
        this.surface = data().deepCopy(fields()[0].schema(), other.surface);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ubi)) {
        this.ubi = data().deepCopy(fields()[1].schema(), other.ubi);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.utp)) {
        this.utp = data().deepCopy(fields()[2].schema(), other.utp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BotFlag instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ebay.epic.common.model.BotFlag other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.surface)) {
        this.surface = data().deepCopy(fields()[0].schema(), other.surface);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ubi)) {
        this.ubi = data().deepCopy(fields()[1].schema(), other.ubi);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.utp)) {
        this.utp = data().deepCopy(fields()[2].schema(), other.utp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'surface' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getSurface() {
      return surface;
    }

    /**
      * Sets the value of the 'surface' field.
      * @param value The value of 'surface'.
      * @return This builder.
      */
    public com.ebay.epic.common.model.BotFlag.Builder setSurface(java.util.List<java.lang.Integer> value) {
      validate(fields()[0], value);
      this.surface = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'surface' field has been set.
      * @return True if the 'surface' field has been set, false otherwise.
      */
    public boolean hasSurface() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'surface' field.
      * @return This builder.
      */
    public com.ebay.epic.common.model.BotFlag.Builder clearSurface() {
      surface = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ubi' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getUbi() {
      return ubi;
    }

    /**
      * Sets the value of the 'ubi' field.
      * @param value The value of 'ubi'.
      * @return This builder.
      */
    public com.ebay.epic.common.model.BotFlag.Builder setUbi(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.ubi = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ubi' field has been set.
      * @return True if the 'ubi' field has been set, false otherwise.
      */
    public boolean hasUbi() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ubi' field.
      * @return This builder.
      */
    public com.ebay.epic.common.model.BotFlag.Builder clearUbi() {
      ubi = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'utp' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getUtp() {
      return utp;
    }

    /**
      * Sets the value of the 'utp' field.
      * @param value The value of 'utp'.
      * @return This builder.
      */
    public com.ebay.epic.common.model.BotFlag.Builder setUtp(java.util.List<java.lang.Integer> value) {
      validate(fields()[2], value);
      this.utp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'utp' field has been set.
      * @return True if the 'utp' field has been set, false otherwise.
      */
    public boolean hasUtp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'utp' field.
      * @return This builder.
      */
    public com.ebay.epic.common.model.BotFlag.Builder clearUtp() {
      utp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BotFlag build() {
      try {
        BotFlag record = new BotFlag();
        record.surface = fieldSetFlags()[0] ? this.surface : (java.util.List<java.lang.Integer>) defaultValue(fields()[0]);
        record.ubi = fieldSetFlags()[1] ? this.ubi : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        record.utp = fieldSetFlags()[2] ? this.utp : (java.util.List<java.lang.Integer>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BotFlag>
    WRITER$ = (org.apache.avro.io.DatumWriter<BotFlag>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BotFlag>
    READER$ = (org.apache.avro.io.DatumReader<BotFlag>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
